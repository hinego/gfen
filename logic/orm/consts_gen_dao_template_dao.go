// Copyright GoFrame gf Author(https://goframe.org). All Rights Reserved.
//
// This Source Code Form is subject to the terms of the MIT License.
// If a copy of the MIT was not distributed with this file,
// You can obtain one at https://github.com/gogf/gf.

package orm

const TemplateGenDaoIndexContent = `
// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"{{.Module}}/{{.DaoPath}}/internal"
)

// internal{{.Name}}Dao is internal type for wrapping internal DAO implements.
type internal{{.Name}}Dao = *internal.{{.Name}}Dao

// {{.Name | lower}}Dao is the data access object for table {{.TableName}}.
// You can define custom methods on it to extend its functionality as you wish.
type {{.Name | lower}}Dao struct {
	internal{{.Name}}Dao
}

var (
	// {{.Name}} is globally public accessible object for table {{.TableName}} operations.
	{{.Name}} = {{.Name | lower}}Dao{
		internal.New{{.Name}}Dao(),
	}
)

// Fill with you ideas below.

`

const TemplateGenDaoInternalContent = `
// ==========================================================================
// Code generated and maintained by GoFrame CLI tool. DO NOT EDIT. {TplCreatedAtDatetimeStr}
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// {{.Name}}Dao is the data access object for table {{.TableName}}.
type {{.Name}}Dao struct {
	table   string          // table is the underlying table name of the DAO.
	group   string          // group is the database configuration group name of current DAO.
	columns {{.Name}}Columns // columns contains all the column names of Table for convenient usage.
}

// {{.Name}}Columns defines and stores column names for table {{.TableName}}.
type {{.Name}}Columns struct { {{range .Data}}
	{{.Name}} string {{end}}
}

// {{.Name | lower}}Columns holds the columns for table {{.TableName}}.
var {{.Name | lower}}Columns = {{.Name}}Columns{ {{range .Data}}
	{{.Name}}:"{{.DBName}}", {{end}}
}

// New{{.Name}}Dao creates and returns a new DAO object for table data access.
func New{{.Name}}Dao() *{{.Name}}Dao {
	return &{{.Name}}Dao{
		group:   "{{.Group}}",
		table:   "{{.TableName}}",
		columns: {{.Name | lower}}Columns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *{{.Name}}Dao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *{{.Name}}Dao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *{{.Name}}Dao) Columns() {{.Name}}Columns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *{{.Name}}Dao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *{{.Name}}Dao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *{{.Name}}Dao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
`
